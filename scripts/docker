#!/bin/sh

## docker helper functions

# remove dangling images and exited containers
docker_cleanup()
{
    docker rm $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
    docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

# delete old container with same name
docker_del_stopped_named()
{
    local name=$1
    local state=$(docker inspect --format "{{.State.Running}}" $name 2>/dev/null)

    if [[ "$state" == "false" ]]; then
        docker rm $name 1>/dev/null
    fi
}

# stop a running container with same name
docker_stop_named()
{
    local name=$1
    local state=$(docker inspect --format "{{.State.Running}}" $name 2>/dev/null)

    if [[ "$state" == "true" ]]; then
        docker stop $name 1>/dev/null
    fi
}

# restart daemon for overlay networking
docker_daemon_restart()
{
    sudo service docker stop >/dev/null 2&>1
    while [ -f /var/run/docker.pid ]; do
        sudo kill $(cat /var/run/docker.pid) >/dev/null 2&>1
        sleep 1
    done

    if [ -n "$1" ]; then
        if [ -n "$2" ]; then
            local nic=$2
        else
            local nic="eth1"
        fi
        sudo docker daemon --userns-remap="$USERNAME" --cluster-store=consul://$1:8500 --cluster-advertise=$nic:2376 >/dev/null 2&>1 & disown
    else
        sudo docker daemon --userns-remap="$USERNAME" >/dev/null 2&>1 & disown
    fi
}

# starts linked containers
docker_relies_on()
{
    local containers=$@

    for container in $containers; do
        local state=$(docker inspect --format "{{.State.Running}}" $container 2>/dev/null)

        if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
            echo "$container is not running, starting it for you"
            $container
        fi
    done
}

# print the full command before running the container
docker_run()
{
    declare -a usersetup
    usersetup+=("-u")
    usersetup+=($(id -u):$(id -g))
    usersetup+=("-e")
    usersetup+=("HOME=$DOCKER_HOME")

    if [ "$DOCKER_USERNS" -eq 0 ] ; then
        echo "docker run $usersetup $@"
        docker run $usersetup $@
    else
        echo "docker run $@"
        docker run $@
    fi
}


## container aliases

# for common latex compilation
lmk()
{
   latexmk --pdf -outdir=out $@     `# run latexmk by setting default outdir`
}

latex()
{
    docker_del_stopped_named latex                      `# delete old containers with same name`

    docker run --rm -it                                 `# remove container after use` \
        -v $(pwd):/latex                                `# share current directory as latex base directory` \
        --name latex                                    `# name the container, so we can delete later` \
        --net=none                                      `# no internet required inside the container` \
        harmish/latex $@                                `# run latex inside latex container`

    docker_stop_named latex                             `# stop the container, when not already stopped`
}

pandoc()
{
    docker_del_stopped_named pandoc                     `# delete old containers with same name`

    docker run --rm -it                                 `# remove container after use` \
        -v $(pwd):/pandoc                               `# share current directory as latex base directory` \
        --name pandoc                                   `# name the container, so we can delete later` \
        --net=none                                      `# no internet required inside the container` \
        harmish/pandoc pandoc $@                        `# run latex inside latex container`

    docker_stop_named pandoc                            `# stop the container, when not already stopped`
}


# generic function for ros related containers
ros_docker()
{
    local DOCKER_HOME_LOCAL=$DOCKER_HOME
    # check to see if at least image name was specified
    if [[ $# -lt 1 ]]; then
        echo "$(tput setaf 1)error: ros_docker called without image name";
        return 1;
    fi

    # parse the arguments with -c, -e, -M, -n, -o, -s, -v and --xvfb options
    declare -a args;
    declare -a envs;
    while [ $# -gt 0 ]; do
        case "$1" in
            # user networking of given container (name)
            --netc)
                shift;
                if [ -n "$1" ]; then
                    envs+=("--net=container:$1");
                    shift;
                fi
                ;;
            # add given environment variables to the container
            -e|--env)
                shift;
                if [ -n "$1" ]; then
                    envs+=("-e");
                    envs+=($1);
                    shift;
                fi
                ;;
            # add given environment variables to the container
            -g|--gpu)
                shift;
                envs+=("--gpus=all");
                ;;
            # set ROS_MASTER_URI to given IP or HOSTNAME
            --master)
                shift;
                if [ -n "$1" ]; then
                    envs+=("-e");
                    envs+=("ROS_MASTER_URI=http://$1:11311");
                    shift;
                fi
                ;;
            # name the container and ROS_HOSTNAME
            --name)
                shift;
                if [ -n "$1" ]; then
                    envs+=("--name=$1");
                    envs+=("-e");
                    envs+=("ROS_HOSTNAME=$1");
                    shift;
                fi
                ;;
            # specity network for the container
            --net)
                shift;
                if [ -n "$1" ]; then
                    envs+=("--net=$1");
                    shift;
                fi
                ;;
            # overlay given workspace
            -o|--overlay-rosws)
                shift;
                if [ -n "$1" ]; then
                    local overlay="$1/setup.bash";
                    shift;
                fi
                ;;
            # publish container ports
            -p)
                shift;
                if [ -n "$1" ]; then
                    envs+=("-p");
                    envs+=($1);
                    shift;
                fi
                ;;
            # share screen for gui apps
            -s|--screen)
                shift;
                envs+=("-e");
                envs+=("DISPLAY=$DISPLAY");
                envs+=("-e");
                envs+=("XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR");
                envs+=("-v");
                envs+=("/tmp/.X11-unix:/tmp/.X11-unix:ro");
                envs+=("-e");
                envs+=("QT_LOGGING_RULES=’*.debug=false’");
                ;;
            # configure user
            -u|--user)
                shift;
                if [ -n "$1" ]; then
                    envs+=("-u");
                    envs+=("$1");
                    DOCKER_HOME_LOCAL="/home/$1"
                    shift;
                fi
                ;;
            # add more volumes to the container
            -v|--volume)
                shift;
                if [ -n "$1" ]; then
                    envs+=("-v");
                    envs+=("$1");
                    shift;
                fi
                ;;
            # use virtual screen for the container, that has gui elements
            --xvfb)
                shift;
                envs+=("-e");
                envs+=("DISPLAY=:1");
                local xvfb=true;
                ;;
            # use virtual screen for the container, that has gui elements
            -h|--host)
                shift;
                envs+=("--userns=host");
                envs+=("--net=host");
                envs+=("--privileged");
                ;;
            # collect remaining arguments
            *)
                args+=($1);
                shift;
                ;;
        esac
    done

    # set remaining arguments as container process arguments
    set -- $args;

    # get image for the container
    local img=$1;
    shift;

    # set entryponit and master-uri when asked
    declare -a ent;
    declare -a copt;
    if [ -n "${overlay+1}" ]; then
        ent=("--entrypoint" "bash");
        if [ "$xvfb" = true ] ; then
            copt+=("-c");
            if [ $# -eq 0 ] ; then
                copt+=("Xvfb -screen 0 1024x768x24 :1 >/dev/null 2>&1 & exec bash --init-file $overlay");
            else
                copt+=("source $overlay; Xvfb -screen 0 1024x768x24 :1 >/dev/null 2>&1 & $*");
            fi
        else
            if [ $# -eq 0 ] ; then
                copt+=("--init-file");
                copt+=("$overlay");
            else
                copt+=("-c");
                copt+=("source $overlay; $*");
            fi
        fi
    else
        if [ "$xvfb" = true ] ; then
            ent=("--entrypoint" "bash");
            copt+=("-c");
            if [ $# -eq 0 ] ; then
                copt+=("Xvfb -screen 0 1024x768x24 :1 >/dev/null 2>&1 & exec bash --init-file /opt/ros/\$ROS_DISTRO/setup.bash");
            else
                copt+=("source /opt/ros/\$ROS_DISTRO/setup.bash; Xvfb -screen 0 1024x768x24 :1 >/dev/null 2>&1 & $*");
            fi
        else
            if [ $# -eq 0 ] ; then
                ent=("--entrypoint" "bash");
                copt+=("-c");
                copt+=("exec bash --init-file /opt/ros/\$ROS_DISTRO/setup.bash");
            else
                copt+=("$@");
            fi
        fi
    fi

    # set working directory to current directory if found under $USER_HOME/ros
    if [ "${$(pwd)##$USER_HOME/ros}" != "$(pwd)" ]; then
        local ros_workdir="$(pwd)";
    else
        local ros_workdir="/";
    fi

    touch $USER_HOME/.bash_history                                                              `# create bash history file when-not-exist`
    mkdir -p $USER_HOME/.config/catkin                                                          `# create catkin config directory when-not-exist`
    mkdir -p $USER_HOME/.config/cmake_clang_tools                                               `# create cmake_clang_tools config directory when-not-exist`
    mkdir -p $USER_HOME/.gazebo                                                                 `# create gazebo settings directory when-not-exist`
    mkdir -p $USER_HOME/.ros                                                                    `# create ros settings directory when-not-exist`
    mkdir -p $USER_HOME/.rviz                                                                   `# create rviz settings directory when-not-exist`
    mkdir -p $USER_HOME/.sdformat                                                               `# create sdformat settings directory when-not-exist`

    docker_run --rm -it                                                                         `# remove container after use` \
        -v /etc/localtime:/etc/localtime:ro                                                     `# use host clock ` \
        -v $USER_HOME/.bash_history:$DOCKER_HOME_LOCAL/.bash_history                            `# share bash history` \
        -v $USER_HOME/.config/catkin:$DOCKER_HOME_LOCAL/.config/catkin                          `# share catkin config directory, required by catking build` \
        -v $USER_HOME/.config/cmake_clang_tools:$DOCKER_HOME_LOCAL/.config/cmake_clang_tools    `# share cmake_clang_tools config directory` \
        -v $USER_HOME/.gazebo:$DOCKER_HOME_LOCAL/.gazebo                                        `# sahre gazebo settings directory` \
        -v $USER_HOME/.ros:$DOCKER_HOME_LOCAL/.ros                                              `# sahre ros settings directory` \
        -v $USER_HOME/.rviz:$DOCKER_HOME_LOCAL/.rviz                                            `# share rviz config directory` \
        -v $USER_HOME/.sdformat:$DOCKER_HOME_LOCAL/.sdformat                                    `# share sdformat config directory` \
        -v $USER_HOME/ros:$USER_HOME/ros                                                        `# sharing all ros workspaces, with same path under host` \
        $envs                                                                                   `# setting additional evnironment variables` \
        -e SHELL=/bin/bash                                                                      `# setting deafult shell, needed by catkin` \
        -w $ros_workdir                                                                         `# setting ros working directory` \
        $ent                                                                                    `# setting the entrypoint` \
        $img $copt                                                                              `# passing remaining arguments`
}

indigo-base(){
    ros_docker ros:indigo-ros-base $@               `# run ros_docker with indigo-base image`
}

indigo-robot(){
    ros_docker ros:indigo-robot $@                  `# run ros_docker with indigo-robot image`
}

indigo-navigation(){
    ros_docker harmish/ros:indigo-navigation $@     `# run ros_docker with indigo-navigation image`
}

indigo-desktop-full(){
    ros_docker osrf/ros:indigo-desktop-full $@      `# run ros_docker with indigo-desktop-full image`
}

indigo-devel(){
    ros_docker harmish/ros:indigo-devel $@          `# run ros_docker with indigo-devel image`
}

indigo-rosbridge(){
    ros_docker harmish/ros:indigo-rosbridge $@      `# run ros_docker with indigo-rosbridge image`
}

indigo(){
    ros_docker harmish/ros:indigo $@                `# run ros_docker with indigo image`
}

jade-base(){
    ros_docker ros:jade-ros-base $@                 `# run ros_docker with jade-base image`
}

jade-robot(){
    ros_docker ros:jade-robot $@                    `# run ros_docker with jade-robot image`
}

jade-navigation(){
    ros_docker harmish/ros:jade-navigation $@       `# run ros_docker with jade-navigation image`
}

jade-desktop-full(){
    ros_docker osrf/ros:jade-desktop-full $@        `# run ros_docker with jade-desktop-full image`
}

jade-devel(){
    ros_docker harmish/ros:jade-devel $@            `# run ros_docker with jade-devel image`
}

kinetic-base(){
    ros_docker ros:kinetic-ros-base $@              `# run ros_docker with kinetic-base image`
}

kinetic-robot(){
    ros_docker ros:kinetic-robot $@                 `# run ros_docker with kinetic-robot image`
}

kinetic-navigation(){
    ros_docker harmish/ros:kinetic-navigation $@    `# run ros_docker with kinetic-navigation image`
}

kinetic-desktop-full(){
    ros_docker osrf/ros:kinetic-desktop-full $@     `# run ros_docker with kinetic-desktop-full image`
}

kinetic-devel(){
    ros_docker harmish/ros:kinetic-devel $@         `# run ros_docker with kinetic-devel image`
}

mummer(){
    ros_docker harmish/mummer:indigo $@     `# run ros_docker with mummer-indigo image`
}

optitrack(){
    ros_docker harmish/robotpkg:optitrack $@        `# run ros_docker with robotpkg-optitrack image`
}

ros-web-devel(){
    docker run --rm -it                             `# remove container after use` \
        -v $(pwd):/roswebtools                      `# share directory wtih sources` \
        harmish/ros:web-devel $@                    `# run ros:web-devel with given arguments`
}

morse(){
    docker run --rm -it                             `# remove container after use` \
        harmish/morse:morse $@                      `# run morse with given arguments`
}

morse-ros(){
    ros_docker                                      `# run ros_docker` \
        --xvfb                                      `# use virtual screen` \
        -v $USER_HOME/.morse:$DOCKER_HOME/.morse    `# share morse config directory` \
        harmish/morse:ros-pr2 $@                    `# run morse:ros-pr2 with given arguments`
}

morse-ros-head(){
    ros_docker                                      `# run ros_docker` \
        -e HEADLESS=false -s                        `# open blender window` \
        -v $USER_HOME/.morse:$DOCKER_HOME/.morse    `# share morse config directory` \
        harmish/morse:ros-pr2 $@                    `# run morse:ros-pr2 with given arguments`
}

julia(){
    local JULIA_DIR=$USER_HOME
    touch $JULIA_DIR/.julia_history                                 `# create julia_history file when-not-exist`
    mkdir -p $JULIA_DIR/.julia                                      `# create julia package directory when-not-exist`

    docker run --rm -it                                             `# remove container after use` \
        -v $JULIA_DIR/.julia_history:$DOCKER_HOME/.julia_history    `# share julia_history` \
        -v $JULIA_DIR/.julia:$DOCKER_HOME/.julia                    `# share julia packages` \
        -v $(pwd):$(pwd)                                            `# mount current directory` \
        -w $(pwd)                                                   `# start workspaces at current directory` \
        harmish/julia:latest julia $@                               `# execute julia with given arguments`
}

node(){
    docker run --rm -it             `# remove container after use` \
        -v $(pwd):$(pwd)            `# mount currnet directory` \
        -w $(pwd)                   `# start workspaces at current directory` \
        harmish/node node $@        `# execute node with given arguments`
}

npm(){
    mkdir -p $USER_HOME/.npm        `# create npm package directory if-not-exist`

    docker run --rm -it             `# remove container after use` \
        -v $USER_HOME/.npm:/.npm    `# share npm package directory` \
        -v $(pwd):$(pwd)            `# mount currnet directory` \
        -w $(pwd)                   `# start workspaces at current directory` \
        harmish/node npm $@         `# execute npm from node-image with given arguments`
}

hugo(){
    docker run --rm -it             `# remove container after use` \
        -v $(pwd):$(pwd)            `# mount currnet directory` \
        -w $(pwd)                   `# start workspaces at current directory` \
        -p 1313:1313                `# share default hugo port` \
        harmish/hugo hugo $@        `# execute hugo from hugo-image with given arguments`
}

rstudio(){
    mkdir -p $USER_HOME/.rstudio                        `# create julia package directory when-not-exist`

    docker run --rm -t                                  `# remove container after use` \
        --name rstudio                                  `# name the container` \
        -p 8787:8787                                    `# share default port of rserver` \
        -v $USER_HOME/.rstudio:$DOCKER_HOME/.rstudio    `# share user-rstudio directory` \
        -v $(pwd):$DOCKER_HOME                          `# share current directory as working directory` \
        harmish/rstudio:latest                          `# run rstudio-server`

    docker_stop_named rstudio                           `# stop the container`
}

consul() {
    docker_stop_named consul_server         `# stop old running container`
    docker_del_stopped_named consul_server  `# delete old container with same name`

    docker run -d                           `# run as daemon` \
        --name consul_server                `# name the container` \
        -p 8500:8500                        `# share default port of consul` \
        -h consul                           `# give container a hostname` \
        --restart=always                    `# restart iff container exits` \
        progrium/consul -server -bootstrap  `# run consul`
}

registry() {
    docker_stop_named registry_server                       `# stop old running container`
    docker_del_stopped_named registry_server                `# delete old container with same name`

    docker run -d                                           `# run as daemon` \
        --name registry_server                              `# name the container` \
        -p 5000:5000                                        `# share default port of registry` \
        --restart=always                                    `# restart iff container exits` \
        -v `pwd`/data:/var/lib/registry                     `# share the data directory` \
        -v `pwd`/certs:/certs                               `# share the certs directory` \
        -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt  `# setup http tls certs` \
        -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key          `# setup http tls key` \
        registry:2                                          `# run registry`
}

registry-frontend() {
    local reg_host=$1                                       `# the given registry server`
    docker_del_stopped_named registry_frontend              `# delete old container with same name`

    docker run --rm -it                                     `# remove container after use` \
        --name registry_frontend                            `# name the container` \
        -e ENV_DOCKER_REGISTRY_HOST=$reg_host               `# setup registry host` \
        -e ENV_DOCKER_REGISTRY_PORT=5000                    `# default port of registry` \
        -e ENV_DOCKER_REGISTRY_USE_SSL=1                    `# use ssl` \
        -p 8080:80                                          `# share port of viewer` \
        konradkleine/docker-registry-frontend:v2            `# run registry frontend`

    docker_stop_named registry_frontend                     `# stop running container`
}

atd() {
    docker_stop_named atd_server            `# stop old running container`
    docker_del_stopped_named atd_server     `# delete old container with same name`

    docker run -d                           `# run a daemonized container` \
        --name atd_server                   `# name the container` \
        -p 1049:1049                        `# share default port of atd` \
        --restart=always                    `# restart iff container exits` \
        harmish/atd:latest                  `# run harmish/atd:latest`
}


## setting USER_HOME, DOCKER_USERNS and DOCKER_HOME

if hash docker 2>/dev/null; then
    if [ -d "/local/users/$USER" ]; then
        USER_HOME=/local/users/$USER
    else
        USER_HOME=$HOME
    fi

    # returns 1 if user-namespace remapping is enabled
    DOCKER_USERNS=$(timeout 2 docker info 2>/dev/null | \
                    awk '$1 ~ /Docker/ && $2 ~ /Root/ && $3 ~ /Dir/ { print $4; }' | \
                    awk -F/ '{ print $NF; }' | \
                    awk -F. '{ if (NF == 2 && $1 + 0 == $1 && $2 + 0 == $2) print 1; else print 0; }')

    if [ -z "$DOCKER_USERNS" ] ; then
        echo "docker service unavailabe"
    elif [ "$DOCKER_USERNS" -eq 0 ] ; then
        DOCKER_HOME=$USER_HOME
    else
        # DOCKER_HOME will be empty string when user-namespace remapping is enabled
        DOCKER_HOME=/root
    fi
fi
