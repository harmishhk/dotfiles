#!/bin/sh

## docker helper functions

# remove dangling images and exited containers
docker_cleanup()
{
    docker rm $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
    docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

# delete old container with same name
docker_del_stopped()
{
    local name=$1
    local state=$(docker inspect --format "{{.State.Running}}" $name 2>/dev/null)

    if [[ "$state" == "false" ]]; then
        docker rm $name 1>/dev/null
    fi
}

# stop a running container
docker_stop()
{
    local name=$1
    local state=$(docker inspect --format "{{.State.Running}}" $name 2>/dev/null)

    if [[ "$state" == "true" ]]; then
        docker stop $name 1>/dev/null
    fi
}

# starts linked containers
relies_on()
{
    local containers=$@

    for container in $containers; do
        local state=$(docker inspect --format "{{.State.Running}}" $container 2>/dev/null)

        if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
            echo "$container is not running, starting it for you"
            $container
        fi
    done
}

docker_run()
{
    echo "docker run $@"
    docker run $@
}


## other helper functions

# return current directory when a ros-direcotry
ros_workdir()
{
    if test "${$(pwd)#*$HOME/ros}" != "$(pwd)"
    then
        echo $(pwd)
    else
        echo "/"
    fi
}


## container aliases

# for common latex compilation
lmk()
{
    docker_del_stopped latex                            `# delete old containers with same name`

    docker run --rm -it                                 `# remove container after use` \
        -v $(pwd):/latex                                `# share current directory` \
        --name latex                                    `# name the container, so we can delete later` \
        --net=none                                      `# no internet required inside the container` \
        -u "$(id -u):$(id -g)"                          `# run everything within user space` \
        harmish/latex latexmk --pdf -outdir=out "$@"  `# setting default outdir`
}

aspell()
{
    docker_del_stopped latex                            `# delete old containers with same name`

    docker run --rm -it                                 `# remove container after use` \
        -v $(pwd):/latex                                `# share current directory` \
        --name latex                                    `# name the container, so we can delete later` \
        --net=none                                      `# no internet required inside the container` \
        -u "$(id -u):$(id -g)"                          `# run everything within user space` \
        harmish/latex aspell "$@"
}

latex()
{
    docker_del_stopped latex                            `# delete old containers with same name`

    docker run --rm -it                                 `# remove container after use` \
        -v $(pwd):/latex                                `# share current directory` \
        --name latex                                    `# name the container, so we can delete later` \
        --net=none                                      `# no internet required inside the container` \
        -u "$(id -u):$(id -g)"                          `# run everything within user space` \
        harmish/latex
}

# generic function for ros related containers
ros_docker()
{
    # check to see if at least image name was specified
    if [[ $# -lt 1 ]]; then
        -e "\e[0;31m$1\e[0m" "ros_docker called without image name";
        return 1;
    fi

    # parse the arguments
    declare -a args;
    declare -a envs;
    while [ $# -gt 0 ]; do
        case "$1" in
            -e|--env)
                shift;
                if [ -n "$1" ]; then
                    envs+=("-e");
                    envs+=("$1");
                    shift;
                fi
                ;;
            -m|--master)
                shift;
                if [ -n "$1" ]; then
                    envs+=("-e");
                    envs+=("ROS_MASTER_URI=http://$1:11311");
                    shift;
                fi
                ;;
            -o|--overlay)
                shift;
                if [ -n "$1" ]; then
                    local overlay="$1/setup.bash";
                    shift;
                fi
                ;;
            -su|--root)
                shift;
                local super_user=true;
                ;;
            *)
                args+=("$1");
                shift;
                ;;
        esac
    done
    #echo "parsed args: " $args;
    eval set "$args";

    # get image for the container
    local img=$1;
    shift;

    # set entryponit and master-uri when asked
    declare -a ent;
    declare -a copt;
    if [ -n "${overlay+1}" ]; then
        ent=("--entrypoint" "bash");
        copt=("-c" "source $overlay && ""$*");
    else
        copt=($@);
    fi

    # run as root when asked
    declare -a duser;
    if [ ! "$super_user" = true ]; then
        duser=("-u" "$(id -u):$(id -g)");
    fi

    # run docker container
    #echo "docker run ... $duser $envs $ent harmish/$img $copt";
    docker_run --rm -it                                 `# remove container after use` \
        --net=host                                      `# helpful to dynamically connect to other ros containers` \
        -v $HOME/.ros:/.ros                             `# required by catking build` \
        -v $HOME/.config/catkin:/.config/catkin:ro      `# required by catking build` \
        -v $HOME/ros:$HOME/ros                          `# sharing all ros workspaces` \
        $envs                                           `# setting additional evnironment variables` \
        -e SHELL=/bin/bash                              `# setting deafult shecll needed by catkin` \
        -w $(ros_workdir)                               `# = current directory when a ros-direcotry` \
        $duser                                          `# run everything within user space` \
        $ent                                            `# setting the entrypoint` \
        harmish/$img $copt                            `# passing remaining arguments`
}

indigo-base(){
    ros_docker ros:indigo-base $@
}

indigo-robot(){
    ros_docker ros:indigo-robot $@
}

indigo-navigation(){
    ros_docker ros:indigo-navigation $@
}

indigo-desktop-full(){
    ros_docker ros:indigo-desktop-full $@
}

indigo-ultimate(){
    ros_docker ros:indigo-ultimate $@
}

jade-base(){
    ros_docker ros:jade-base $@
}

jade-robot(){
    ros_docker ros:jade-robot $@
}

jade-navigation(){
    ros_docker ros:jade-navigation $@
}

jade-desktop-full(){
    ros_docker ros:jade-desktop-full $@
}

jade-ultimate(){
    ros_docker ros:jade-ultimate $@
}

catkin_create_pkg(){
    jade-desktop-full -o $HOME/ros/catkin_ws/install_jade "cd $HOME/ros/infrastructure/catkin_pkg && python setup.py install > /dev/null 2>&1 && cd - && catkin_create_pkg $@"
}

jade-web-devel(){
    ros_docker ros:jade-web-devel $@
}

ros-web(){
    docker run --rm -it \
        --net=host \
        -v $HOME/ros/web:/root/ros/web \
        harmish/ros:web-devel $@
}

spencer(){
    ros_docker spencer:indigo $@
}

morse(){
    docker run --rm -it \
        -u "$(id -u):$(id -g)" \
        harmish/morse:morse $@
}

morse-ros(){
    ros_docker_xvbf morse:ros-pr2 $@
}

# morse-ros(){
#     local overlay_set=false;
#     for arg in $@; do
#         if [[ ("$arg" == "-o") || ("$arg" == "--overlay") ]]; then
#             overlay_set=true;
#             break;
#         fi
#     done
#
#     echo "$@";
#     if [[ "$overlay_set" == "true" ]]; then
#         echo "ros_docker morse:ros-pr2 $@"
#         ros_docker morse:ros-pr2 xvbf-run -s $@
#     else
#         echo "ros_docker morse:ros-pr2 $@"
#         ros_docker morse:ros-pr2 $@
#     fi
# }

ros_docker_xvbf(){
    # check to see if at least image name was specified
    if [[ $# -lt 1 ]]; then
        echo -e "\e[0;31m$1\e[0m" "ros_docker called without image name";
        return 1;
    fi

    # parse the arguments
    declare -a args;
    declare -a envs;
    while [ $# -gt 0 ]; do
        case "$1" in
            -e|--env)
                shift;
                if [ -n "$1" ]; then
                    envs+=("-e");
                    envs+=("$1");
                    shift;
                fi
                ;;
            -m|--master)
                shift;
                if [ -n "$1" ]; then
                    envs+=("-e");
                    envs+=("ROS_MASTER_URI=http://$1:11311");
                    shift;
                fi
                ;;
            -o|--overlay)
                shift;
                if [ -n "$1" ]; then
                    local overlay="$1/setup.bash";
                    shift;
                fi
                ;;
            -su|--root)
                shift;
                local super_user=true;
                ;;
            *)
                args+=("$1");
                shift;
                ;;
        esac
    done
    #echo "parsed args: " $args;
    eval set "$args";

    # get image for the container
    local img=$1;
    shift;

    # set entryponit and master-uri when asked
    declare -a ent;
    declare -a copt;
    if [ -n "${overlay+1}" ]; then
        ent=("--entrypoint" "bash");
        copt=("-c" "Xvfb -screen 0 1024x768x24 :1 >/dev/null 2>&1 & source $overlay && $*");
    else
        copt=($@);
    fi

    # run as root when asked
    declare -a duser;
    if [ ! "$super_user" = true ]; then
        duser=("-u" "$(id -u):$(id -g)");
    fi

    # run docker container
    #echo "docker run ... $duser $envs $ent harmish/$img $copt";
    docker_run --rm -it                                 `# remove container after use` \
        --net=host                                      `# helpful to dynamically connect to other ros containers` \
        -v $HOME/.ros:/.ros                             `# required by catking build` \
        -v $HOME/.config/catkin:/.config/catkin:ro      `# required by catking build` \
        -v $HOME/ros:$HOME/ros                          `# sharing all ros workspaces` \
        $envs                                           `# setting additional evnironment variables` \
        -e SHELL=/bin/bash                              `# setting deafult shecll needed by catkin` \
        -w $(ros_workdir)                               `# = current directory when a ros-direcotry` \
        $duser                                          `# run everything within user space` \
        $ent                                            `# setting the entrypoint` \
        -e DISPLAY=:1                                   `# xvfb needs a display` \
        harmish/$img $copt                            `# passing remaining arguments`
}

ros-web-devel(){
    docker run --rm -it \
    -v `pwd`:${$(pwd)/$HOME//root} \
    -w ${$(pwd)/$HOME//root} \
    harmish/ros:web-devel $@
}

julia(){
    touch $HOME/.julia_history

    docker run --rm -it \
        -v $(pwd):$(pwd) \
        -v $HOME/.julia_history:/.julia_history \
        -w "$(pwd)" \
        -u "$(id -u):$(id -g)" \
        harmish/julia:latest $@
}

optitrack(){
    ros_docker robotpkg:optitrack $@
}

node(){
    docker run --rm -it \
        -v "$(pwd):$(pwd)" \
        -w "$(pwd)" \
        -u "$(id -u):$(id -g)" \
        node node $@
}

npm(){
    docker run --rm -it \
        -v "$(pwd):$(pwd)" -v "$HOME/.npm:/.npm" \
        -w "$(pwd)" \
        -u "$(id -u):$(id -g)" \
        node npm $@
}

jekyll(){
    docker_del_stopped jekyll

    docker run --rm -t \
        --name jekyll \
        -v "$(pwd):$(pwd)" \
        -w "$(pwd)" \
        -p 4000:4000 \
        -u "$(id -u):$(id -g)" \
        harmish/jekyll jekyll $@

    docker_stop jekyll
}

hexo(){
    docker run --rm -it \
        -v "$(pwd):$(pwd)" \
        -w "$(pwd)" \
        -p 4000:4000 \
        -u "$(id -u):$(id -g)" \
        harmish/hexo $@
}
